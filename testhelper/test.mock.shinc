#: shMock framework library
#:
#: File : test.mock.shinc
#
#
# Nexttop 2023-2025 (nexttop.se)
# Maintenance nexttop -> hossein a.t. (osxx.com)
#-------------------------------------------------
#
# Local variables:
#  ORIGINALSCRIPT_PATH
#  SCRIPT_PATH
#
#-------------------------------------------------
cmdForInternalUsages="which
    cat
    grep
    sort
    sed
    tr
    uniq
    awk
    rm"
for item in ${cmdForInternalUsages};
do
    eval o${item}=$(which $item)
done

mockCountFile=mockcount
mockCallLogFile=mockcalllog
mockedFuncList=()

#*
#*  @description    Reset mock caches by removing the test temporary folder
#*
#*  @params         N/A
#*
#*  @return         N/A
#*
function mockReset () #@ USAGE mockReset
{
    $orm -rfv $TESTWORK_TEMPORARYFOLDER/* 1> /dev/null || true
}

#*
#*  @description    Increase the counter for the given funcName by one unit
#*                  and log the arguments passed during calling the funcName
#*
#*  @params         funcName
#*
#*  @return         N/A
#*
function mockCallCounter () #@ USAGE mockCallCounter funcName
{
    funcName=$1
    echo "$funcName" >> $TESTWORK_TEMPORARYFOLDER/$mockCountFile
    echo "${@}" >> $TESTWORK_TEMPORARYFOLDER/$mockCallLogFile
}

#*
#*  @description    Log the arguments passed during piping
#*
#*  @params         N/A
#*
#*  @return         N/A
#*
function mockCallLog () #@ USAGE mockCallLog
{
    echo "-${@}" >> $TESTWORK_TEMPORARYFOLDER/$mockCallLogFile
}

#*
#*  @description    Find and print the output for the given funcName
#*
#*  @params         funcName, defaultValue
#*
#*  @return         N/A
#*
function mockCallOutput () #@ USAGE mockCallOutput funcName defaultValue
{
    funcName=$1
    defaultValue=$2

    mockCallGetTimes $funcName
    currentCallTime=$?

    outputValue="${funcName}_output"
    outputValue="${!outputValue}"
    outputValue=( ${outputValue// /<:>} )
    outputValue=( ${outputValue//<;>/ } )
    outputValueLen=${#outputValue[@]}
    if [ "$outputValueLen" -gt 0 ]; then
        if [ $currentCallTime -lt $(($outputValueLen + 1)) ]; then
            currentTimeOutput=${outputValue[$(($currentCallTime - 1))]}
        else
            currentTimeOutput=${outputValue[$(($outputValueLen - 1))]}
        fi
        currentTimeOutput=( ${currentTimeOutput//---/ } )
        if [[ "${currentTimeOutput}" != '' ]]; then
            currentTimeOutput=${currentTimeOutput//<:>/ }
            [ "${currentTimeOutput}" != '-' ] &&
                echo -e "${currentTimeOutput}"
        fi
    else
        [ $# -gt 1 ] &&
            echo  "${@:2}"
    fi
}

#*
#*  @description    Find the return code for the given funcName
#*
#*  @params         funcName, defaultValue
#*
#*  @return         return code
#*
function mockCallReturn () #@ USAGE mockCallReturn funcName defaultValue
{
    funcName=$1
    defaultValue=$2

    mockCallGetTimes $funcName
    currentCallTime=$?

    returnValue="${funcName}_return"
    returnValue="${!returnValue=}"
    returnValue=( ${returnValue//<;>/ } )
    returnValueLen=${#returnValue[@]}

    if [ "$returnValueLen" -gt 0 ]; then
        if [ $currentCallTime -lt $(($returnValueLen + 1)) ]; then
            currentTimeReturn=$((${returnValue[$(($currentCallTime - 1))]}))
        else
            currentTimeReturn=$((${returnValue[$(($returnValueLen - 1))]}))
        fi
    else
        return $(($defaultValue))
    fi

    return $(($currentTimeReturn))
}

#*
#*  @description    Print the call counter for the given funcName
#*
#*  @params         funcName
#*
#*  @return         0
#*
function mockCallGetTimes () #@ USAGE mockCallGetTimes funcName
{
    funcName=$1

    [ ! -f $TESTWORK_TEMPORARYFOLDER/$mockCountFile ] &&
        return 0

    mockCounterArr=( $($ocat $TESTWORK_TEMPORARYFOLDER/$mockCountFile | $osort -n | $ouniq -c | $oawk '{ print $2, $1 }' | $otr -s ' ') )

    for (( i=0; i<${#mockCounterArr[@]} ; i+=2 )) ; do
        if [ "${mockCounterArr[i]}" == "$funcName" ]; then
            return $(("${mockCounterArr[i+1]}"))
        fi
    done

    return 0
}

#*
#*  @description    Print the logged info for the given funcName 
#*
#*  @params         funcName, timeNumber
#*
#*  @return         0 or 1
#*
function mockGetCallInfo () #@ USAGE mockGetCallInfo funcName timeNumber
{
    funcName=$1
    timeNumber='-1'
    [ $# -gt 1 ] &&
        timeNumber=$2
    logStr=''
    exitCode=1
    if [ $timeNumber -eq "-1" ]; then
        logStr=$($ogrep -E -w -o "^${funcName}.*" $TESTWORK_TEMPORARYFOLDER/$mockCallLogFile | $osed '$!d' )
        exitCode=$?
    else
        logStr=$($ogrep -E -w -o "^${funcName}.*" $TESTWORK_TEMPORARYFOLDER/$mockCallLogFile | $osed "${timeNumber}q;d")
        exitCode=$?
    fi
    echo -e $logStr
    return $exitCode
}

#*
#*  @description    Create a list
#*
#*  @params         dataNamePerfix, numberOfItems
#*
#*  @return         N/A
#*
function mockCreateDataList () #@ USAGE mockCreateDataList dataNamePerfix numberOfItems
{
    dataNamePerfix=$1
    numberOfItems=$2
    dataArrayStr=""
    for (( i=1; i<$(($numberOfItems + 1)) ; i+=1 )) ; do
        dataArrayStr="$dataArrayStr$dataNamePerfix$i "
    done

    echo "${dataArrayStr}"
}

#*
#*  @description    Convert [:space:] to <;>
#*
#*  @params         parameters
#*
#*  @return         N/A
#*
function mockCreateParamList () #@ USAGE mockCreateParamList parameters
{
    params=$@
    echo ${params// /'<;>'}
}

#*
#*  @description    The default function called by the mocked items
#*
#*  @params         funcName
#*
#*  @return         An exit code
#*
function defaultMockFunc ()#@ USAGE defaultMockFunc funcName
{
    funcName=$1

    mockCallCounter ${@}

    cmdExitCode=0
    outputValue="${funcName}_output"
    outputValue="${!outputValue}"
    if [ "$outputValue" == "" ]; then
        cmdPath=$(eval "$owhich ${funcName}")
        cmdStr="$cmdPath ${@:2}"
        #output=$(eval "$cmdPath ${@:2}")
        output=$($cmdStr)
        cmdExitCode=$?
        echo -e "$output"
    else
        pipData=""
        if [ ! -t 0 ]; then
            pipData="$funcName:pip:"
            while read -r data; do
                pipData="$pipData$data"
            done
        fi
        echo $(mockCallOutput "${funcName}" "${funcName} ${@:2}")
        [ "$pipData" != "" ] &&
            mockCallLog "$pipData"
    fi
    mockCallReturn "${funcName}" $cmdExitCode
    return $?
}

#*
#*  @description    Create mock for the given cmd  
#*
#*  @params         cmd, cmdReturn, cmdOutput
#*
#*  @return         N/A
#*
function ADDMOCK () #@ USAGE ADDMOCK cmd cmdReturn cmdOutput
{
    cmd=$1

    cmdDeclaration='-'
    cmdPath=$(eval "$owhich ${cmd}")
    [ $? -ne 0 ] &&
        cmdDeclaration="$(declare -f $cmd)" &&
        echo -e "function $cmdDeclaration" > $TESTWORK_TEMPORARYFOLDER/$cmd
    mockedFuncList+=( $cmd )

    if [ $# -gt 1 ]; then
        cmdReturn=$2
        source <($ocat <<EOF
${cmd}_return="$cmdReturn"
EOF
        );
    fi
    if [ $# -gt 2 ]; then
        cmdOutput=$3
        source <($ocat <<EOF
${cmd}_output="$cmdOutput"
EOF
        );
    fi

    source <($ocat <<EOF
function $cmd ()
{
    defaultMockFunc "\${FUNCNAME[0]}" \${@}
}
EOF
);

}

#*
#*  @description    Set expect and return code for a mocked cmd
#*
#*  @params         cmd, cmdReturn, cmdOutput
#*
#*  @return         N/A
#*
function SETEXPECT () #@ USAGE SETEXPECT cmd cmdReturn cmdOutput
{
    cmd=$1
    if [ $# -gt 1 ]; then
        cmdReturn=$2
        source <($ocat <<EOF
${cmd}_return="$cmdReturn"
EOF
        );
    fi
    if [ $# -gt 2 ]; then
        cmdOutput=$3
        source <($ocat <<EOF
${cmd}_output="$cmdOutput"
EOF
        );
    fi

}

#*
#*  @description    Check expect calls for given funcName(s)
#*
#*  @params         funcName:expectTimes
#*
#*  @return         0 or 1
#*
function ExpectCalls () #@ USAGE ExpectCalls funcName:expectTimes ...
{
    [ ! -f $TESTWORK_TEMPORARYFOLDER/$mockCountFile ] &&
        return 0

    mockCounterArr=( $($ocat $TESTWORK_TEMPORARYFOLDER/$mockCountFile | $osort -n | $ouniq -c | $oawk '{ print $2, $1 }' | $otr -s ' ') )
    for item in "$@"
    do
        funcName=""
        expectTimes=0
        funcNameFoundFlag=0

        if [ "${item//:/}" != "$item" ]; then
            itemArray=(${item//:/ })
            [ ${#itemArray[@]} != 2 ] &&
                echo "Wrong statement '$item'!" &&
                return 1
            funcName=${itemArray[0]}
            expectTimes=${itemArray[1]}
            for (( i=0; i<${#mockCounterArr[@]} ; i+=2 )) ; do
                if [ "${mockCounterArr[i]}" == "$funcName" ]; then
                    funcNameFoundFlag=1
                    [ "${mockCounterArr[i+1]}" -ne $expectTimes ] &&
                        echo "'$funcName' : expected $expectTimes, actual calls ${mockCounterArr[i+1]}." &&
                        $ogrep -n -E -w -o "^${funcName}.*" $TESTWORK_TEMPORARYFOLDER/$mockCallLogFile &&
                        return 1
                fi
            done

            if [ $funcNameFoundFlag -eq 0 ] && [ $expectTimes -ne 0 ]; then
                echo "'$funcName' : expected $expectTimes, actual calls 0."
                return 1
            fi
        fi
    done
    return 0
}

#*
#*  @description    Check expect calls for given funcName
#*
#*  @params         funcName, expectTimes
#*
#*  @return         0 or 1
#*
function ExpectCall () #@ USAGE ExpectCall funcName expectTimes
{
    output=$(ExpectCalls $1:$2)
    ExpectCallsExitcode=$?
    [ "$output" != "" ] &&
        echo "$output"
    return $ExpectCallsExitcode
}

#*
#*  @description    Check expect output for given funcName(s)
#*
#*  @params         funcName//expectOutput
#*
#*  @return         0 or 1
#*
function ExpectOutputs () #@ USAGE ExpectOutputs funcName//expectOutput ...
{
    for item in "$@"
    do
        if [ "${item//\/\//}" != "$item" ]; then
            itemArray=(${item//\/\// })
            if [ ${#itemArray[@]} -gt 2 ]; then
                echo "Wrong statement '$item'!" &&
                return 1
            elif [ ${#itemArray[@]} == 2 ]; then
                funcName=${itemArray[0]}
                expectOutput=${itemArray[1]}
                if [ "$expectOutput" != "-" ] && [ "$expectOutput" != "" ]; then
                    lastCallInfo=$(mockGetCallInfo $funcName)
                     [ ! -z ${lastCallInfo+x} ] &&
                        [ "${lastCallInfo//$expectOutput/}" == "$lastCallInfo" ] &&
                            echo "The output is not matched ('$funcName : $lastCallInfo' <~#> '$expectOutput')!" &&
                            return 1
                fi
            fi
        fi
    done
    return 0
}

#*
#*  @description    Check expect output for given funcName
#*
#*  @params         funcName, expectOutput
#*
#*  @return         0 or 1
#*
function ExpectOutput () #@ USAGE ExpectCall funcName expectOutput
{
    funcName=$1
    expectOutput=$2
    timeNumber='-1'
    [ $# -gt 2 ] &&
        timeNumber=$3

    lastCallInfo=$(mockGetCallInfo $funcName $timeNumber)
    [ ! -z ${lastCallInfo+x} ] &&
        [ "${lastCallInfo//$expectOutput/}" == "$lastCallInfo" ] &&
            echo "The output is not matched ('$funcName : $lastCallInfo' <~#> '$expectOutput')!" &&
            return 1
    return 0
}

#*
#*  @description    Delete mock for the given cmd
#*
#*  @params         cmd
#*
#*  @return         N/A
#*
function REMOVEMOCK () #@ USAGE REMOVEMOCK cmd
{
    cmd=$1
    unset $cmd
    unset ${cmd}_return
    unset ${cmd}_output

    if [ -f $TESTWORK_TEMPORARYFOLDER/$cmd ]; then
        source <($ocat $TESTWORK_TEMPORARYFOLDER/$cmd)
        rm $TESTWORK_TEMPORARYFOLDER/$cmd
    fi
    mockedFuncList=("${mockedFuncList[@]/#$cmd}")
}

#*
#*  @description    Delete all mocks
#*
#*  @params         N/A
#*
#*  @return         N/A
#*
function RESETMOCKS () #@ USAGE RESETMOCKS
{
    currentCmdList=( "${mockedFuncList[@]}" )
    for cmd in ${currentCmdList[@]};
    do
        REMOVEMOCK $cmd
    done
    mockReset
}